package kr.or.forcewave.spatial.service;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import kr.or.forcewave.condition.dao.CondDAO;
import kr.or.forcewave.condition.vo.CondVO;
import kr.or.forcewave.safety.vo.SafetyVO;
import kr.or.forcewave.spatial.dao.SpatialDAO;
import kr.or.forcewave.spatial.vo.ResultVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SpatialServiceImpl implements SpatialService {

	@Inject
	private SpatialDAO spatialDao;
	
	@Inject
	private CondDAO condDao;
	
	@Override
	public List<SafetyVO> retrieveSafetyList(String clicked) {
		return spatialDao.selectSafetyList(clicked);
	}

	@Override
	public ResultVO retrieveResult(int condNo) {
		// 조건 가져오기(읍면동, 실거래가 필터)
		CondVO cond = condDao.selectCond(condNo);
		
		// 전월세 조건
		String[] reList = cond.getCondRe().split(",");
		String res = "";
		for (int i = 0; i < reList.length; i++) {
			res += "'" + reList[i] + "'";
			if (i < reList.length - 1) {
				res += ",";
			}
		}
		cond.setCondRe(res);
		
		// 읍면동, 실거래가 필터에 맞는 실거래가 매물만 뽑아냄(쿼리)
		// 거기서 버퍼주고 카운팅하기
		String details = cond.getCondDetails();
		Map<String, List<String>> sorted = sorting(details);
		
		List<ResultVO> resultList = spatialDao.selectAnalysis(cond);
		double publicAvg = getAvg(resultList, "public");
		double publicStd = standardDeviation(resultList, "public");
 
		return null;
	}
	
	public Map<String, List<String>> sorting(String details) {
		List<String> list = Arrays.asList(details.split(","));
		// 교통
		List<String> tds = list.stream()
							.filter(d -> StringUtils.contains("지하철 버스 택시 자전거 도보", d))
							.collect(Collectors.toList());
		// 편의
		List<String> cds = list.stream()
							.filter(d -> StringUtils.contains("백화점 마트 편의점 외부화장실 영화관 운동시설 노래방 PC방", d))
							.collect(Collectors.toList());
		// 보건
		List<String> mds = list.stream()
							.filter(d -> StringUtils.contains("병원 약국 보건소 요양소", d))
							.collect(Collectors.toList());
		// 공공
		List<String> ads = list.stream()
							.filter(d -> StringUtils.contains("행정복지센터 구청 시청 공기업 정부기관", d))
							.collect(Collectors.toList());
		// 학군
		List<String> sds = list.stream()
							.filter(d -> StringUtils.contains("대학교 고등학교 중학교 초등학교 유치원 학원 평생교육원", d))
							.collect(Collectors.toList());
		// 자연
		List<String> nds = list.stream()
							.filter(d -> StringUtils.contains("가로수 공원 숲 산 하천", d))
							.collect(Collectors.toList());
		
		Map<String, List<String>> map = new HashMap<>();
		map.put("교통", tds);
		map.put("편의", cds);
		map.put("보건", mds);
		map.put("공공", ads);
		map.put("학군", sds);
		map.put("자연", nds);	
		
		return map;
	}

	public static double getAvg(List<ResultVO> resultList, String sort) {
		return resultList.stream().filter(r -> StringUtils.equals(r.getSafetySort(), sort)).collect(Collectors.averagingInt(ResultVO::getCnt));
	}
	public static double standardDeviation(List<ResultVO> resultList, String sort) {
		List<Double> list = resultList.stream().filter(r -> StringUtils.equals(r.getSafetySort(), sort)).map(r -> r.getCnt()*1.0).collect(Collectors.toList());
		Double[] array = list.toArray(new Double[list.size()]);
	    if (array.length < 2) return Double.NaN;

	    double sum = 0.0;
	    double sd = 0.0;
	    double diff;
	    double meanValue = getAvg(resultList, sort);

	    for (int i = 0; i < array.length; i++) {
	      diff = array[i] - meanValue;
	      sum += diff * diff;
	    }
	    sd = Math.sqrt(sum / (array.length - 1));

	    return sd;
	}	
}
